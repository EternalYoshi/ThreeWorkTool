<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtNotes.Text" xml:space="preserve">
    <value>--------------------------|Notes and Advice|--------------------------

- The Replace All command for Arc and Folder nodes requires that you have an EXACT directory match for it to work, as you are meant to select the same named folder at the same level, or if using it on an arc, the folder with the arc's name. If you are porting things, like say for the Clone Engine, be sure to run this BEFORE you rename anything inside the arc. 

- Any directory level above the arc name doesn't matter for Replace All/Export All provided the total directory character count does not exceed 255.

- LRP files are formatted the way they are for a reason. If you wish to add a file, follow the syntax and do not make typos 
in the extension or you will have problems. It's always path then filename then extension.

- Transparency is expressed with a checkerboard background, similar to photoshop.

 -DXT1 and DXT5 have differing compression formulas meaning you can't interchange them or you will get corrupted pixels in game or just straight up crashing.
This is why there's a failsafe against selecting texture types not compatible with the texture compression algorithm of the chosen file.

- DXT1 files can only be imported as regular textures without transparency and specular textures. If you want to save it as other formats, you have to add an alpha channel in your image editing software(if it doesn't exist already) and save it as a DXT5.

- DXT5 can't be saved as normal textures without transparency and specular textures. Just save it as a DXT1 in your image editing software.

- Normal Maps in Marvel 3 have their Red and Alpha channels swapped. They also have their Green Channel inverted. If you make or edit these normal maps, keep this in mind.

- Portraits have to be saved DXT5 in your image editing software to work, no need to save it as a DXT1 and then hex edit it to DXT5. In the TexConverter Dialog, select the option that says DXT5 when importing. 
Make sure it has an alpha channel in your image editing software before you save it. This program was designed around DDS files generated from the 
newer NVIDA Photoshop DDS Plugin found here: https://developer.nvidia.com/2020.1.1/nvidia_texture_tools_exporter_photoshop_plugin
You can also use Paint.Net in a roundabout way with the right plugin as well. 

Remember to turn off the option to generate Mip Maps when making UI elements in your image editing software. A good rule of thumb is that
if the filename has a NOMIP suffix on it, make sure there are no mip maps added to the portrat or the image will get blurry for users with lower end
PC settings.

- MSD files must be viewed and edited by Right Clicking/Selecting Edit and selecting Preview/Edit. The encoding is unknown(it is NOT ASCII) 
and only English Alphabet characters and accents used in French and Spanish are supported. 
The Line break denotations are there for a reason; don't remove them unless you know what you are doing. Edit at your own risk!

- LMT Entry names start from 0, not 1. Those using the AnmChr editor have to be aware that the IDs here are written in decimal and not in hex, often going up to 255.

- To get this to work I had to redefine the .m3a format. Any .m3a files made from other methods such as with Lean's tool will NOT be compatible with this program.

- While you can't make new entries in an LMT(yet), you can replace a blank entry in the LMT file just like you would with a populated entry.

- Replacing/injecting m3a entries means the respective LMT file is going to be rebuilt so replacing will take an extra second or two.

- Remember that you can export textures as .DDS files. You can select the extension between .tex(which is by default), .dds, and .png via the Export option's Dialog.

- You can reorder nodes in the same directory. You can do so by right clicking and selecting move up or move down, or just press CTRL + UP/CTRL + DOWN. This will affect looading order too.

- Chain List files control what physics files(.chn and .ccl)are used on the character. Removing an entry will disable that physics file from being used.

- You can do quick reordering of files with CTRL+UP and CTRL+DOWN. Make sure to follow this order for files:
Textures(.tex), then Materials(.mrl), then Model files(.mod).

- The Manifest Editor is an optional Editor allows you greater control of the ordering of files that will be saved. 
It's generated as the file opens to preserve the orgiinal file order.
You are free to add and subtract, but make sure that anything you add exists. Otherwise the file will be skipped and NOT put in the arc file upon saving.

- Refreshing Manifest will get all the existing files inside the arc, added and original, but the original order will be lost.

- If you want to use the Manifest while saving, make sure that Use Manifest in the settings is checked. Otherwise it will just use the original save coding and save files in the order displayed on the TreeView.

- The Replace All Text based commands are case sensitive. You can access one by selecting a Folder or Material and right click it. Best used to port costume files from one number to another. Be caerful when working with the numbers 00 and 01.

- GEM, or .gem files are what link a prop model file to a .lmt and .anm file. They're not easy to use but remember to follow the syntax. If the second line is blank that generally means there's no .anm file for the named prop.

- You can export Material files as .yml files that aim to be compatible with the model importer's tools. Floating point estimations may differ slightly in the ten thousandths but the overall values should check out when converting.

- .cst, aka Chain List Files have 4 numerical values at the end of each .chn reference. Make sure to follow the syntax or the changes you make in the textbox will NOT be saved.

The Most Recently Used list is now limited to 12 items and will flush oldest items on the list upon closing the program. If there's more than that it could mean that the program didn't close properly.

You can choose whether or not an .M3a file will reuse another entries' Track Pointer and everything that goes with it. This can cause problems when rebuilding so while it may raise the file side it's best to disable it on any entries that have this set to true.
be sure to right click the LMT node and select Rebuild LMT after you do the above so the LMT can be rebuilt with its own track data.

If editing a .lmt file is causing crashes, check the m3a entries for any entries that reuse track data, denoted by the IsResuingTrackData variable being true, and set them all to false, then select the LMT and select Rebuild LMT. It will increase file size a bit but will stop crashes on the offending actions.

</value>
  </data>
</root>